# -*- coding: utf-8 -*-
"""Face Detection with OpenCV.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/187ydcrNqF_KZsWzBo2egC8azvL4FSnMN

# Loading the necessary libraries
"""

# Commented out IPython magic to ensure Python compatibility.
# Import the necessary libraries
import numpy as np
import cv2 
import matplotlib.pyplot as plt
# %matplotlib inline

"""# Loading images


"""

#  Loading the image to be tested
test_image = cv2.imread('chris.jpg')

# Converting to grayscale as opencv expects detector takes in input gray scale images
test_image_gray = cv2.cvtColor(test_image, cv2.COLOR_BGR2GRAY)

# Displaying grayscale image
plt.imshow(test_image_gray, cmap='gray')

"""OpenCV loads an image in BGR format so we would convert it into RBG format to be able to display its true colours."""

def convertToRGB(image):
    return cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

"""# Haar cascade files

OpenCV comes with a lot of pre-trained classsifiers. For instance there are classifiers for smile, eyes,face etc. These come in the form of xml files and are located in `opencv/data/haarcascades/` folder. I have also added these pre-trained classifiers in the opencv folder

### Loading the classifier for frontal face
"""

haar_cascade_face = cv2.CascadeClassifier('opencv/haarcascades/haarcascade_frontalface_alt2.xml')

"""# Face detection

We shall be using the detectMultiscale module of the classifier.This function will return the co-ordinates(x and y posiiton plus the height and width) of the detected faces as Rect(x,y,w,h). 
"""

faces_rects = haar_cascade_face.detectMultiScale(test_image_gray, scaleFactor = 1.2, minNeighbors = 5);

# Let us print the no. of faces found
print('Faces found: ', len(faces_rects))

"""Our next step is to loop over all the co-ordinates it returned and draw rectangles around them using Open CV.We will be drawing a green rectangle with thicknessof 2"""

for (x,y,w,h) in faces_rects:
     cv2.rectangle(test_image, (x, y), (x+w, y+h), (0, 255, 0), 2)

"""Finally, we shall display the original image in coloured to see if the face has been detected correctly or not."""

#convert image to RGB and show image
plt.imshow(convertToRGB(test_image))

"""### Let us create a generalised function for the entire face detection process."""

def detect_faces(cascade, test_image, scaleFactor = 1.1):
    # create a copy of the image to prevent any changes to the original one.
    image_copy = test_image.copy()
    
    #convert the test image to gray scale as opencv face detector expects gray images
    gray_image = cv2.cvtColor(image_copy, cv2.COLOR_BGR2GRAY)
    
    # Applying the haar classifier to detect faces
    faces_rect = cascade.detectMultiScale(gray_image, scaleFactor=scaleFactor, minNeighbors=5)
    
    for (x, y, w, h) in faces_rect:
        cv2.rectangle(image_copy, (x, y), (x+w, y+h), (0, 255, 0), 15)
        
    return image_copy

"""### Testing the function on new image



"""

#loading image
test_image2 = cv2.imread('Loki.jpg')

#call the function to detect faces
faces = detect_faces(haar_cascade_face, test_image2)

#convert to RGB and display image
plt.imshow(convertToRGB(faces))

"""### Testing the function on a group photograph"""

#loading image
test_image2 = cv2.imread('team2.jpeg')

#call the function to detect faces
faces = detect_faces(haar_cascade_face, test_image2)

#convert to RGB and display image
plt.imshow(convertToRGB(faces))

"""### Saving the Image"""

cv2.imwrite('image1.png',faces)

